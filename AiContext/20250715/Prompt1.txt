Hi, I'd like to train some reinforcement learning agents with the goal of playing various board games, beginning with ricochet robots - we are going to create a codebase to this end together.
I would like the code to be written in python, and where possible make use of already existing libraries wherever appropriate. The code will be modular, containing separate base and derived classes for the different objects we'll need (games, agents, models, curriculums etc.). We will also include A* solvers for the games the agents are to play. There will be the option of saving and re-loading relevant states (eg. specific board configurations for the game state, saved models for agents to use, etc.). We should be able to switch out for different agents, different 'input datatypes' (ie ways that the agents can 'visualise' the board) such as raw data or 'human-style rendered' board states, different curriculumns (all easy boards, easy then harder boards etc.), as well as keeping the code general enough to switch out for a different board game eventually if we want to, and whatever other flexible options you think are interesting. All relevant classes should have unit tests as well. We will need to make sure that the code is computationally efficient (especially the ricochet robots board game logic, since the ML model training can be put onto GPUs but the board game logic likely cannot, so this might end up being a bottleneck).

Please, without writing any code, produce a step-by step plan for creating this reposoitory. You should complete some research into already existing python libraries for the various steps (eg. for the agents, model training/logging/saving, the ricochet robots game logic itself, etc.), and then lay out the high level classes you plan to make or import. If it is useful for you to be able to plan, you can create the files and template classes (though you do not need to).